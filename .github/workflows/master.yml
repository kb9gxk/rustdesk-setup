name: Full Rustdesk Build and Release

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  full_build_and_release:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [default, jeff]
    env:
      RUSTDESK_CONFIG: ${{ secrets.RUSTDESK_CONFIG }}
      RUSTDESK_PASSWORD: ${{ secrets.RUSTDESK_PASSWORD }}
      CODE_SIGNING_CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
      CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Get Chicago Timestamp
        id: timestamp
        run: |
          echo "formatted_time=$(date -d 'now' +'%Y.%m.%d.%H%M')" >> $GITHUB_ENV
          echo "formatted_time2=$(date -d 'now' +'%Y.%m.%d')" >> $GITHUB_ENV
          echo "formatted_time_linux=$(date -d 'now' +'%Y.%m.%d.%H%M')" >> $GITHUB_ENV
      
      - name: Debug Secrets (Redacted)
        run: |
          if ("$env:RUSTDESK_CONFIG" -eq "") { Write-Output "⚠ RUSTDESK_CONFIG is missing!" } else { Write-Output "✅ RUSTDESK_CONFIG is set!" }
          if ("$env:RUSTDESK_PASSWORD" -eq "") { Write-Output "⚠ RUSTDESK_PASSWORD is missing!" } else { Write-Output "✅ RUSTDESK_PASSWORD is set!" }
          if ("$env:CODE_SIGNING_CERTIFICATE" -eq "") { Write-Output "⚠ CODE_SIGNING_CERTIFICATE is missing!" } else { Write-Output "✅ CODE_SIGNING_CERTIFICATE is set!" }
          if ("$env:CODE_SIGNING_CERTIFICATE_PASSWORD" -eq "") { Write-Output "⚠ CODE_SIGNING_CERTIFICATE_PASSWORD is missing!" } else { Write-Output "✅ CODE_SIGNING_CERTIFICATE_PASSWORD is set!" }
        shell: pwsh

      - name: Modify Configuration.cs (Jeff)
        if: matrix.build_type == 'jeff'
        run: |
          $configFile = ".\RustdeskSetup\Configuration.cs"
          $configContent = Get-Content $configFile

          $configValue = "private const string DefaultConfigValue = `"$($env:RUSTDESK_CONFIG)`";"
          $passwordValue = "private const string DefaultPasswordValue = `"$($env:RUSTDESK_PASSWORD)`";"

          $newConfigContent = $configContent -replace 'private const string DefaultConfigValue = .*;', $configValue
          $newConfigContent = $newConfigContent -replace 'private const string DefaultPasswordValue = .*;', $passwordValue

          $newConfigContent | Set-Content $configFile
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore "rustdesk-setup.csproj"

      - name: Build project
        run: dotnet build "rustdesk-setup.csproj" --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish "rustdesk-setup.csproj" --configuration Release --output publish --no-build

      - name: Rename Executable
        shell: pwsh
        run: |
          if ("${{ matrix.build_type }}" -eq "default") {
            Rename-Item -Path "publish/rustdesk-setup.exe" -NewName "rustdesk-setup.exe"
          } else {
            Rename-Item -Path "publish/rustdesk-setup.exe" -NewName "rustdesk-setup-jeff.exe"
          }

      - name: Upload Built Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-installer-${{ matrix.build_type }}
          path: publish/*.exe

      - name: Download Artifacts (Default Build)
        if: matrix.build_type == 'default'
        uses: actions/download-artifact@v4
        with:
          name: 'rustdesk-installer-default'
          path: artifacts

      - name: Download Artifacts (Jeff Build)
        if: matrix.build_type == 'jeff'
        uses: actions/download-artifact@v4
        with:
          name: 'rustdesk-installer-jeff'
          path: artifacts

      - name: Decode and Save Code Signing Certificate
        if: matrix.build_type == 'default'
        run: |
          echo "${{ secrets.CODE_SIGNING_CERTIFICATE }}" | base64 -d > artifacts/code-signing.pfx
          echo "Certificate decoded successfully"

      - name: Check if pfx file exists
        if: matrix.build_type == 'default'
        run: |
          ls -al artifacts
          file artifacts/code-signing.pfx
          echo "Decoded certificate listed"

      - name: Locate signtool.exe
        if: matrix.build_type == 'default'
        id: find_signtool
        run: |
          $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe | 
            Where-Object { $_.FullName -match "x64" } | 
            Select-Object -First 1 -ExpandProperty FullName

          if (-not $signtoolPath) {
            Write-Host "ERROR: signtool.exe not found!"
            exit 1
          }
          Write-Host "SIGNSUCCESS: Found signtool.exe at $signtoolPath"
          echo "SIGNSUCCESS_PATH=$signtoolPath" >> $GITHUB_ENV

      - name: List all artifact files
        if: matrix.build_type == 'default'
        run: |
          echo "Listing all files in the artifacts directory"
          ls -al artifacts

      - name: Sign Executables
        if: matrix.build_type == 'default'
        run: |
          Write-Host "Attempting to sign the executables..."
          Get-ChildItem -Path "artifacts" -Filter "*.exe" | ForEach-Object {
            Write-Host "Signing: $($_.FullName)"
            & "${{ env.SIGNSUCCESS_PATH }}" sign /fd SHA256 /f "artifacts/code-signing.pfx" /p "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}" /t http://timestamp.digicert.com /v $_.FullName
          }

      - name: Upload Signed Installers
        if: matrix.build_type == 'default'
        uses: actions/upload-artifact@v4
        with:
          name: signed-rustdesk-installers
          path: artifacts/*.exe

      - name: Download Signed Installers
        if: matrix.build_type == 'default'
        uses: actions/download-artifact@v4
        with:
          name: signed-rustdesk-installers
          path: release-artifacts

      - name: Create GitHub Release
        if: matrix.build_type == 'default'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: v${{ github.run_id }}
          release_name: "Rustdesk Installer Release ${{ github.run_id }}"
          body: "Signed Rustdesk installers."
          draft: false
          prerelease: false

      - name: Rename Signed Installers
        if: matrix.build_type == 'default'
        shell: pwsh
        run: |
          Rename-Item -Path "release-artifacts/rustdesk-setup.exe" -NewName "rustdesk-setup.exe"
          Rename-Item -Path "release-artifacts/rustdesk-setup-jeff.exe" -NewName "rustdesk-setup-jeff.exe"

      - name: Upload Signed Default Installer to Release
        if: matrix.build_type == 'default'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: release-artifacts/rustdesk-setup.exe
          asset_name: rustdesk-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Signed Jeff Build to Release
        if: matrix.build_type == 'default'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: release-artifacts/rustdesk-setup-jeff.exe
          asset_name: rustdesk-setup-jeff.exe
          asset_content_type: application/octet-stream
