name: Full Rustdesk Build and Release

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  full_build_default:
    runs-on: windows-latest
    outputs:
      formatted_time: ${{ steps.timestamp.outputs.formatted_time }}
      formatted_time2: ${{ steps.timestamp.outputs.formatted_time2 }}
    steps:
      - name: Validate Required Secrets
        run: |
          $missing = @()
          if (-not "${{ secrets.RUSTDESK_CONFIG }}") { $missing += "RUSTDESK_CONFIG" }
          if (-not "${{ secrets.RUSTDESK_PASSWORD }}") { $missing += "RUSTDESK_PASSWORD" }
          if (-not "${{ secrets.CODE_SIGNING_CERTIFICATE }}") { $missing += "CODE_SIGNING_CERTIFICATE" }
          if (-not "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}") { $missing += "CODE_SIGNING_CERTIFICATE_PASSWORD" }
          if (-not "${{ secrets.GITHUB_TOKEN }}") { $missing += "GITHUB_TOKEN" }

          if ($missing.Count -gt 0) {
            Write-Host "❌ Missing required secrets: $($missing -join ', ')"
            exit 1
          } else {
            Write-Host "✅ All required secrets are set!"
          }
        shell: pwsh

      - name: Checkout code
        uses: actions/checkout@v3


      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Get Chicago Timestamp
        id: timestamp
        run: |
          $chicagoTimeZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Central Standard Time")
          $chicagoTime = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $chicagoTimeZone)
          
          $formatted_time = $chicagoTime.ToString("yyyy.MM.dd.HHmm")
          $formatted_time2 = $chicagoTime.ToString("yyyy.MM.dd")

          echo "formatted_time=$formatted_time" >> $GITHUB_ENV
          echo "formatted_time2=$formatted_time2" >> $GITHUB_ENV

          echo "::set-output name=formatted_time::$formatted_time"
          echo "::set-output name=formatted_time2::$formatted_time2"

      - name: Modify rustdesk-setup.csproj for Versioning (Default)
        run: |
          $projectFile = "rustdesk-setup.csproj"
          [xml]$xml = Get-Content $projectFile
          $version = "${{ env.formatted_time }}"
          $version2 = "${{ env.formatted_time2 }}"

          # Ensure PropertyGroup exists
          if ($xml.Project.PropertyGroup -eq $null) {
            $xml.Project.AppendChild($xml.CreateElement("PropertyGroup")) | Out-Null
          }

          # Update values
          $xml.Project.PropertyGroup.AssemblyVersion = $version
          $xml.Project.PropertyGroup.FileVersion = $version
          $xml.Project.PropertyGroup.Version = $version2
          $xml.Save($projectFile)
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore "rustdesk-setup.csproj"

      - name: Build project (Default)
        run: dotnet build "rustdesk-setup.csproj" --configuration Release --no-restore

      - name: Publish project (Default)
        run: |
          dotnet publish "rustdesk-setup.csproj" --configuration Release --output "publish" --no-build
          Rename-Item -Path "publish/rustdesk-setup.exe" -NewName "rustdesk-setup.exe"
        shell: pwsh

      - name: Upload Built Default Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-installer-default
          path: publish/rustdesk-setup.exe

  full_build_jeff:
    runs-on: windows-latest
    needs: full_build_default
    env:
      RUSTDESK_CONFIG: ${{ secrets.RUSTDESK_CONFIG }}
      RUSTDESK_PASSWORD: ${{ secrets.RUSTDESK_PASSWORD }}
      FORMATTED_TIME: ${{ needs.full_build_default.outputs.formatted_time }}
      FORMATTED_TIME2: ${{ needs.full_build_default.outputs.formatted_time2 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Modify Configuration.cs (Jeff)
        run: |
          (Get-Content "Configuration.cs") -replace 'private const string DefaultConfigValue = .*;', "private const string DefaultConfigValue = `"$env:RUSTDESK_CONFIG`";" |
          Set-Content "Configuration.cs"
        shell: pwsh

      - name: Modify rustdesk-setup.csproj for Versioning (Jeff)
        run: |
          $projectFile = "rustdesk-setup.csproj"
          [xml]$xml = Get-Content $projectFile
          $xml.Project.PropertyGroup.AssemblyVersion = "$env:FORMATTED_TIME"
          $xml.Project.PropertyGroup.FileVersion = "$env:FORMATTED_TIME"
          $xml.Project.PropertyGroup.Version = "$env:FORMATTED_TIME2"
          $xml.Save($projectFile)
        shell: pwsh

      - name: Restore dependencies (Jeff)
        run: dotnet restore "rustdesk-setup.csproj"

      - name: Build project (Jeff)
        run: dotnet build "rustdesk-setup.csproj" --configuration Release --no-restore

      - name: Publish project (Jeff)
        run: |
          dotnet publish "rustdesk-setup.csproj" --configuration Release --output "publish" --no-build
          Rename-Item -Path "publish/rustdesk-setup.exe" -NewName "rustdesk-setup-jeff.exe"
        shell: pwsh

      - name: Upload Built Jeff Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-installer-jeff
          path: publish/rustdesk-setup-jeff.exe

  sign_executables:
    runs-on: windows-latest
    needs: [full_build_default, full_build_jeff]
    env:
      CODE_SIGNING_CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
      CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Built Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Locate signtool.exe
        id: find_signtool
        run: |
          $signtoolPath = Get-Command signtool.exe | Select-Object -ExpandProperty Source
          echo "::set-output name=signtool_path::$signtoolPath"

      - name: Sign Executables
        run: |
          Get-ChildItem -Path "artifacts" -Filter "*.exe" | ForEach-Object {
            Start-Process -FilePath "${{ steps.find_signtool.outputs.signtool_path }}" -ArgumentList "sign", "/fd", "SHA256", "/f", "artifacts/code-signing.pfx", "/p", "${{ env.CODE_SIGNING_CERTIFICATE_PASSWORD }}", "/t", "http://timestamp.digicert.com", "/v", $_.FullName -Wait
          }
        shell: pwsh

      - name: Upload Signed Builds
        uses: actions/upload-artifact@v4
        with:
          name: signed-rustdesk-installers
          path: artifacts/*.exe

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: "v${{ needs.full_build_default.outputs.formatted_time }}"
          release_name: "Rustdesk Installer Release ${{ needs.full_build_default.outputs.formatted_time }}"
          body: "This release contains the signed Rustdesk installers."
          draft: false
          prerelease: false

      - name: Upload Signed Installers to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: artifacts/rustdesk-setup.exe
          asset_name: rustdesk-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Signed Jeff Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: artifacts/rustdesk-setup-jeff.exe
          asset_name: rustdesk-setup-jeff.exe
          asset_content_type: application/octet-stream
