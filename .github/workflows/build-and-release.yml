name: Build and Release Rustdesk Installers

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [default, jeff] # Define the build types

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Get Chicago Timestamp
        id: timestamp
        run: |
          $chicagoTimeZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Central Standard Time")
          $chicagoTime = [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), $chicagoTimeZone)
          echo "formatted_time=$($chicagoTime.ToString('yyyy.M.dd.HHmm'))" >> $GITHUB_ENV
          echo "formatted_time2=$($chicagoTime.ToString('yyyy.M.dd'))" >> $GITHUB_ENV
          echo "formatted_time_linux=$(date -d "$($chicagoTime.ToString('yyyy-MM-dd HH:mm:ss'))" +%Y.%m.%d.%H%M)" >> $GITHUB_ENV
        shell: pwsh

      - name: Update Assembly and File Version
        run: |
          $csprojPath = "rustdesk-setup.csproj"
          [xml]$csproj = Get-Content $csprojPath

          if (-not $csproj.Project.PropertyGroup) {
            $propertyGroup = $csproj.CreateElement("PropertyGroup")
            $csproj.Project.AppendChild($propertyGroup)
          } else {
            $propertyGroup = $csproj.Project.PropertyGroup[0]
          }

          $propertyNames = @("FileVersion", "AssemblyVersion", "Version")
          $propertyValues = @("${{ env.formatted_time }}", "${{ env.formatted_time }}", "${{ env.formatted_time2 }}")

          for ($i = 0; $i -lt $propertyNames.Length; $i++) {
            $prop = $propertyNames[$i]
            if (-not $propertyGroup.$prop) {
              $newElement = $csproj.CreateElement($prop)
              $newElement.InnerText = $propertyValues[$i]
              $propertyGroup.AppendChild($newElement)
            } else {
              $propertyGroup.$prop = $propertyValues[$i]
            }
          }

          $csproj.Save($csprojPath)
        shell: pwsh

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          git pull origin main
          git add rustdesk-setup.csproj
          git commit -m "Update versions to ${{ env.formatted_time }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh

      - name: Modify Configuration.cs (Jeff)
        if: matrix.build_type == 'jeff'
        run: |
          (Get-Content Configuration.cs) -replace 'internal static string RustdeskCfg { get; set; } = DefaultConfigValue;', "internal static string RustdeskCfg { get; set; } = `"${{ secrets.RUSTDESK_CONFIG }}`";" | Set-Content Configuration.cs
          (Get-Content Configuration.cs) -replace 'internal static string RustdeskPw { get; set; } = DefaultPasswordValue;', "internal static string RustdeskPw { get; set; } = `"${{ secrets.RUSTDESK_PASSWORD }}`";" | Set-Content Configuration.cs
        shell: pwsh

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish --configuration Release --output publish --no-build

      - name: Rename Published Executable
        run: |
          $exeFile = Get-ChildItem -Path "publish" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $exeFile) {
            Write-Host "ERROR: No executable found in publish directory!"
            exit 1
          }
          $newExeName = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe"
          Move-Item -Path $exeFile -Destination $newExeName -Force
        shell: pwsh

      - name: Sign the Executable
        env:
          CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          $exeFile = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe"
          $signtoolPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe | Select-Object -First 1 -ExpandProperty FullName
          & $signtoolPath sign /fd SHA256 /f codesigning.pfx /p "$env:CODE_SIGNING_CERTIFICATE_PASSWORD" /t http://timestamp.digicert.com /v $exeFile
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-installer-${{ matrix.build_type }}
          path: publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe

    outputs:
      formatted_time_linux: ${{ env.formatted_time_linux }}

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [default, jeff]

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustdesk-installer-${{ matrix.build_type }}
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.formatted_time_linux }}-${{ matrix.build_type }}
          release_name: Release v${{ needs.build.outputs.formatted_time_linux }} (${{ matrix.build_type }})
          body: |
            Rustdesk installer build ${{ needs.build.outputs.formatted_time_linux }} (${{ matrix.build_type }}).
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe
          asset_name: rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe
          asset_content_type: application/octet-stream
