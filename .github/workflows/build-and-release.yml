name: Build and Release Rustdesk Installers

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [default, jeff] # Define the build types
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Get Chicago Timestamp
        id: timestamp
        shell: pwsh
        run: |
          # Get UTC time
          $utcTime = Get-Date -Date (Get-Date).ToUniversalTime()

          # Get the Chicago time zone
          $chicagoTimeZone = [TimeZoneInfo]::FindSystemTimeZoneById("America/Chicago")

          # Convert UTC time to Chicago time
          $chicagoTime = [TimeZoneInfo]::ConvertTimeFromUtc($utcTime, $chicagoTimeZone)

          # Format the time
          $formattedTime = $chicagoTime.ToString("yyyy.M.dd.HHmm")
          $formattedTime2 = $chicagoTime.ToString("yyyy.M.dd")
          echo "formatted_time=$formattedTime" >> $GITHUB_OUTPUT
          echo "formatted_time2=$formattedTime2" >> $GITHUB_OUTPUT
          echo "formatted_time_linux=$(date -d "$($chicagoTime.ToString('yyyy-MM-dd HH:mm:ss'))" +%Y.%m.%d.%H%M)" >> $GITHUB_OUTPUT

      - name: Update Assembly and File Version
        run: |
          dotnet add package dotnet-proj --version 0.10.1
          dotnet tool restore
          dotnet proj -v "${{ steps.timestamp.outputs.formatted_time }}" -f "${{ steps.timestamp.outputs.formatted_time }}" -p "${{ steps.timestamp.outputs.formatted_time2 }}" rustdesk-setup.csproj

      - name: Modify Configuration.cs (Jeff)
        if: matrix.build_type == 'jeff'
        run: |
          $configFile = "Configuration.cs"
          if (Test-Path $configFile) {
            $configContent = Get-Content $configFile
            $newConfigContent = $configContent -replace 'internal static string RustdeskCfg { get; set; } = DefaultConfigValue;', "internal static string RustdeskCfg { get; set; } = `"`${{ secrets.RUSTDESK_CONFIG }}`"`;"
            $newConfigContent = $newConfigContent -replace 'internal static string RustdeskPw { get; set; } = DefaultPasswordValue;', "internal static string RustdeskPw { get; set; } = `"`${{ secrets.RUSTDESK_PASSWORD }}`"`;"
            $newConfigContent | Set-Content $configFile
          } else {
            Write-Host "Configuration.cs not found!"
            exit 1
          }

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Publish project
        run: dotnet publish --configuration Release --output publish --no-build

      - name: Rename Published Executable
        run: |
          $exeFile = Get-ChildItem -Path "publish" -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $exeFile) {
            Write-Host "ERROR: No executable found in publish directory!"
            exit 1
          }
          $newExeName = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe"
          Move-Item -Path $exeFile -Destination $newExeName -Force
        shell: pwsh

      - name: Verify Output File
        run: |
          $exeFile = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe"
          if (!(Test-Path $exeFile)) {
            Write-Host "ERROR: $exeFile not found in publish directory!"
            exit 1
          }

      - name: Decode and Save PFX Certificate
        env:
          CODE_SIGNING_CERTIFICATE: ${{ secrets.CODE_SIGNING_CERTIFICATE }}
        run: |
          if ("$env:CODE_SIGNING_CERTIFICATE" -eq "") {
            Write-Host "ERROR: CODE_SIGNING_CERTIFICATE secret is missing!"
            exit 1
          }
          $certBytes = [System.Convert]::FromBase64String("$env:CODE_SIGNING_CERTIFICATE")
          [System.IO.File]::WriteAllBytes("codesigning.pfx", $certBytes)

      - name: Verify Certificate File
        run: |
          if (!(Test-Path "codesigning.pfx")) { 
            Write-Host "ERROR: Certificate file not found!" 
            exit 1 
          }

      - name: Sign the Executable
        env:
          CODE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
        run: |
          $exeFile = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe"
          & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /fd SHA256 /f codesigning.pfx /p "$env:CODE_SIGNING_CERTIFICATE_PASSWORD" /t http://timestamp.digicert.com /v $exeFile

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rustdesk-installer-${{ matrix.build_type }} # Unique artifact name
          path: publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe
    
    outputs:
      formatted_time_linux: ${{ steps.timestamp.outputs.formatted_time_linux }}

  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [default, jeff] # Match the build types from the build job
    
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustdesk-installer-${{ matrix.build_type }} # Match artifact name
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.formatted_time_linux }}-${{ matrix.build_type }} # Unique tag name
          release_name: Release v${{ needs.build.outputs.formatted_time_linux }} (${{ matrix.build_type }})
          body: |
            Rustdesk installer build ${{ needs.build.outputs.formatted_time_linux }} (${{ matrix.build_type }}).
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe
          asset_name: rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || '' }}.exe
          asset_content_type: application/octet-stream
