name: Build and Release Rustdesk Installers
'on':
  push:
    branches:
      - main
  workflow_dispatch: null
jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type:
          - default
          - jeff
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      - name: Get Chicago Timestamp
        id: timestamp
        run: >
          $chicagoTimeZone =
          [System.TimeZoneInfo]::FindSystemTimeZoneById("Central Standard Time")

          $chicagoTime =
          [System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(),
          $chicagoTimeZone)

          echo "formatted_time=$($chicagoTime.ToString('yyyy.M.dd.HHmm'))" >>
          $GITHUB_ENV

          echo "formatted_time2=$($chicagoTime.ToString('yyyy.M.dd'))" >>
          $GITHUB_ENV

          echo "formatted_time_linux=$(date -d
          "$($chicagoTime.ToString('yyyy-MM-dd HH:mm:ss'))" +%Y.%m.%d.%H%M)" >>
          $GITHUB_ENV
        shell: pwsh
      - name: Update Assembly and File Version
        run: >
          $csprojPath = "rustdesk-setup.csproj"

          [xml]$csproj = Get-Content $csprojPath

          if (-not $csproj.Project.PropertyGroup) {
            $propertyGroup = $csproj.CreateElement("PropertyGroup")
            $csproj.Project.AppendChild($propertyGroup)
          } else {
            $propertyGroup = $csproj.Project.PropertyGroup[0]
          }

          $propertyNames = @("FileVersion", "AssemblyVersion", "Version")

          $propertyValues = @("${{ env.formatted_time }}", "${{
          env.formatted_time }}", "${{ env.formatted_time2 }}")

          for ($i = 0; $i -lt $propertyNames.Length; $i++) {
            $prop = $propertyNames[$i]
            $value = $propertyValues[$i].ToString()  # Explicitly convert to string

            # Find or create the property element
            $element = $propertyGroup.SelectSingleNode($prop)
            if (-not $element) {
              $element = $csproj.CreateElement($prop)
              $propertyGroup.AppendChild($element)
            }

            # Set the value of the property
            $element.InnerText = $value
          }

          $csproj.Save($csprojPath)
        shell: pwsh
      - name: Modify Configuration.cs (Jeff)
        if: matrix.build_type == 'jeff'
        run: >
          (Get-Content Configuration.cs) -replace 'internal static string
          RustdeskCfg { get; set; } = DefaultConfigValue;', "internal static
          string RustdeskCfg { get; set; } = `"${{ secrets.RUSTDESK_CONFIG
          }}`";" | Set-Content Configuration.cs

          (Get-Content Configuration.cs) -replace 'internal static string
          RustdeskPw { get; set; } = DefaultPasswordValue;', "internal static
          string RustdeskPw { get; set; } = `"${{ secrets.RUSTDESK_PASSWORD
          }}`";" | Set-Content Configuration.cs
        shell: pwsh
      - name: Restore dependencies
        run: dotnet restore "rustdesk-setup.csproj"
      - name: Build project
        run: >-
          dotnet build "rustdesk-setup.csproj" --configuration Release
          --no-restore
      - name: Publish project
        run: >-
          dotnet publish "rustdesk-setup.csproj" --configuration Release
          --output publish --no-build
      - name: Rename Published Executable
        run: >
          $exeFile = Get-ChildItem -Path "publish" -Filter "*.exe" |
          Select-Object -First 1 -ExpandProperty FullName

          if (-not $exeFile) {
            Write-Host "ERROR: No executable found in publish directory!"
            exit 1
          }

          $newExeName = "publish/rustdesk-setup${{ matrix.build_type == 'jeff'
          && '-jeff' || '' }}.exe"

          Move-Item -Path $exeFile -Destination $newExeName -Force
        shell: pwsh
      - name: Decode and Save Code Signing Certificate
        id: cert
        env:
          CODE_SIGNING_CERTIFICATE: '${{ secrets.CODE_SIGNING_CERTIFICATE }}'
        run: >
          $certBytes =
          [System.Convert]::FromBase64String("$env:CODE_SIGNING_CERTIFICATE")

          Set-Content -Path "codesigning.pfx" -Value $certBytes -Encoding
          ([System.Text.Encoding]::Default)
        shell: pwsh
      - name: Upload Code Signing Certificate Artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-signing-cert
          path: codesigning.pfx
      - name: Debug Code Signing Certificate
        run: |
          if (Test-Path "codesigning.pfx") {
            Write-Host "Certificate file exists."
            Get-Content "codesigning.pfx" -Head 10
          } else {
            Write-Host "Certificate file does not exist."
            exit 1
          }
        shell: pwsh
      - name: Debug Code Signing Password
        env:
          CODE_SIGNING_CERTIFICATE_PASSWORD: '${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}'
        run: |
          Write-Host "CODE_SIGNING_CERTIFICATE_PASSWORD: $env:CODE_SIGNING_CERTIFICATE_PASSWORD"
          if ($env:CODE_SIGNING_CERTIFICATE_PASSWORD) {
            Write-Host "Password is set."
          } else {
            Write-Host "Password is not set."
            exit 1
          }
        shell: pwsh
      - name: Debug signtool path
        run: |
          Write-Host "Signtool path: $signtoolPath"
        shell: pwsh
      - name: Sign the Executable
        env:
          CODE_SIGNING_CERTIFICATE_PASSWORD: '${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}'
        run: >
          $exeFile = "publish/rustdesk-setup${{ matrix.build_type == 'jeff' &&
          '-jeff' || '' }}.exe"

          $signtoolPath = Get-Command signtool -ErrorAction SilentlyContinue

          if (-not $signtoolPath) {
            $signtoolPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe | 
              Where-Object { $_.FullName -match "x64" } | 
              Select-Object -First 1 -ExpandProperty FullName
          }

          if (-not $signtoolPath) {
            Write-Host "ERROR: signtool.exe not found!"
            exit 1
          }

          try {
            & $signtoolPath sign /fd SHA256 /f codesigning.pfx /p "$env:CODE_SIGNING_CERTIFICATE_PASSWORD" /t http://timestamp.digicert.com /v $exeFile
          } catch {
            Write-Host "ERROR: Signing failed. $_"
            exit 1
          }
        shell: pwsh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'rustdesk-installer-${{ matrix.build_type }}'
          path: >-
            publish/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' ||
            '' }}.exe
    outputs:
      formatted_time_linux: '${{ env.formatted_time_linux }}'
  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type:
          - default
          - jeff
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: 'rustdesk-installer-${{ matrix.build_type }}'
          path: artifacts
      - name: Download Code Signing Certificate Artifact
        uses: actions/download-artifact@v4
        with:
          name: code-signing-cert
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: >-
            v${{ needs.build.outputs.formatted_time_linux }}-${{
            matrix.build_type }}
          release_name: >-
            Release v${{ needs.build.outputs.formatted_time_linux }} (${{
            matrix.build_type }})
          body: >
            Rustdesk installer build ${{
            needs.build.outputs.formatted_time_linux }} (${{ matrix.build_type
            }}).
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: >-
            artifacts/rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff'
            || '' }}.exe
          asset_name: >-
            rustdesk-setup${{ matrix.build_type == 'jeff' && '-jeff' || ''
            }}.exe
          asset_content_type: application/octet-stream
