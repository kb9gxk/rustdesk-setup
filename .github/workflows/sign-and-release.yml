name: Sign and Release Rustdesk Installers

'on':
  workflow_call:  # Allows execution when called by master.yml
  workflow_dispatch:  # Allows manual triggering
  workflow_run:
    workflows: ["Build Rustdesk Installers"]
    types:
      - completed

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Download Artifacts (Default Build)
        uses: actions/download-artifact@v4
        with:
          name: 'rustdesk-installer-default'
          path: artifacts

      - name: Download Artifacts (Jeff Build)
        uses: actions/download-artifact@v4
        with:
          name: 'rustdesk-installer-jeff'
          path: artifacts

      - name: Decode and Save Code Signing Certificate
        shell: bash
        run: |
          echo "${{ secrets.CODE_SIGNING_CERTIFICATE }}" | base64 -d > artifacts/code-signing.pfx

      - name: Locate signtool.exe
        id: find_signtool
        shell: pwsh
        run: |
          $signtoolPath = Get-ChildItem -Path "C:\Program Files (x86)\Windows Kits\10\bin\" -Recurse -Filter signtool.exe |
            Where-Object { $_.FullName -match "x64" } |
            Select-Object -First 1 -ExpandProperty FullName

          if (-not $signtoolPath) {
            Write-Host "ERROR: signtool.exe not found!"
            exit 1
          }

          echo "SIGNSUCCESS_PATH=$signtoolPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Sign Executables
        env:
          CODE_SIGNING_CERTIFICATE_PASSWORD: '${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}'
        shell: pwsh
        run: |
          Get-ChildItem -Path "artifacts" -Filter "*.exe" | ForEach-Object {
            & "${{ env.SIGNSUCCESS_PATH }}" sign /fd SHA256 /f "artifacts/code-signing.pfx" /p "$env:CODE_SIGNING_CERTIFICATE_PASSWORD" /t http://timestamp.digicert.com /v $_.FullName
          }

      - name: Upload Signed Installers
        uses: actions/upload-artifact@v4
        with:
          name: signed-rustdesk-installers
          path: artifacts/*.exe

  release:
    needs: sign
    runs-on: ubuntu-latest
    steps:
      - name: Download Signed Installers
        uses: actions/download-artifact@v4
        with:
          name: signed-rustdesk-installers
          path: release-artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: v${{ github.run_id }}
          release_name: "Rustdesk Installer Release ${{ github.run_id }}"
          body: "Signed Rustdesk installers."
          draft: false
          prerelease: false

      - name: Rename Signed Installers
        shell: pwsh
        run: |
          Rename-Item -Path "release-artifacts/rustdesk-installer-default.exe" -NewName "rustdesk-setup.exe"
          Rename-Item -Path "release-artifacts/rustdesk-installer-jeff.exe" -NewName "rustdesk-setup-jeff.exe"

      - name: Upload Signed Default Installer to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: release-artifacts/rustdesk-setup.exe
          asset_name: rustdesk-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Signed Jeff Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: release-artifacts/rustdesk-setup-jeff.exe
          asset_name: rustdesk-setup-jeff.exe
          asset_content_type: application/octet-stream
